service:
  name: websocket-chat

provider:
  name: aws
  profile: default
  runtime: nodejs12.x
  stackName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
      Resource:
        - Fn::GetAtt: [ApplicationDynamoDBTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ApplicationDynamoDBTable, Arn]
              - '*'
  environment:
    APPLICATION_TABLE: "chat-table-${self:provider.stage}"
    API_REGION: "${self:provider.region}"
    DOMAIN_NAME: ""  

  # optional
  websocketApiName: websocket-chat-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  # serverless-dynamodb-local
  dynamodb:
    tableName: "chat-table-${self:provider.stage}"
    start:
      migrate: true
    stages:
      - dev # whitelisting this stage for dynamodb local

functions:
  # manage connection and disconnection of clients
  connectionManager:
    handler: src/handler.connectionManager
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  # just in case we are getting weird / bad data
  # we can react to it with a sane response
  defaultMessages:
    handler: src/handler.defaultMessage
    events:
      - websocket:
          route: $default

  # handle chat app messages
  sendMessage:
    handler: src/handler.sendMessage
    events:
      - websocket:
          route: sendMessage

  # Channel Subscriptions
  channelManager:
    handler: src/handler.channelManager
    events:
      - websocket:
          route: subscribeChannel
      - websocket:
          route: unsubscribeChannel

  # handle broadcasting all events
  # we do this by listening the dynamodb table stream for messages or disconnects
  # could even be done by sub-systems directly to dynamodb
  broadcast:
    handler: src/handler.broadcast
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ApplicationDynamoDBTable, StreamArn]

resources:
  Resources:
    # DynamoDB best practices suggest most applications should only
    # have a single table. For resources check out the follow links...
    # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/best-practices.html
    # Advanced Design Patterns for DynamoDB - https://www.youtube.com/watch?v=HaEPXoXVf2k
    ApplicationDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:provider.environment.APPLICATION_TABLE}"
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: reverse
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: pk
                KeyType: RANGE
            Projection:
                ProjectionType: ALL